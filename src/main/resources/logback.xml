<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <contextName>myAppName</contextName>
    <!--======================================================-->
    <!-- 用来定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。
         通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使 ${} 来使用变量。-->
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <!--Windows 可以使用类似：value="D:/"-->
    <!--Linux 可以使用类似：/opt/tomcat/logs-->
    <property name="log.max.size" value="10MB"/> <!-- 日志文件大小 -->
    <property name="log.root.level" value="${log.root.level}"/> <!-- 日志级别 -->
    <property name="log.other.level" value="${log.other.level}"/> <!-- 其他日志级别 -->
    <!-- 日志路径，这里是相对路径，web项目eclipse下会输出到eclipse的安装目录下，
         如果部署到linux上的tomcat下，会输出到tomcat/bin目录下
         ./mplogs/ : 当前项目路径下
         ../mplogs/ : 当前项目路径外（与项目路径同级）
    -->
    <property name="log.base" value="./mplogs/"/><!-- 指定到项目下的mplogs下 -->
    <property name="log.moduleName" value="${log.moduleName}"/>  <!-- 模块名称， 影响日志配置名，日志文件名 -->

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
                [ %-5level] [%date{yyyy-MM-dd HH:mm:ss.SSS}]%logger{96} [%line][%X{logid}]
                - %msg%n
            </pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>

        <!--设置过滤的信息-->
        <!-- 过滤器，执行一个过滤器会有返回个枚举值，即DENY，NEUTRAL，ACCEPT其中之一。
                返回DENY，日志将立即被抛弃不再经过其他过滤器；
                返回NEUTRAL，有序列表里的下个过滤器过接着处理日志；
                返回ACCEPT，日志会被立即处理，不再经过剩余过滤器。
            LevelFilter： 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。有以下子节点：
                <level>:设置过滤级别
                <onMatch>:用于配置符合过滤条件的操作
                <onMismatch>:用于配置不符合过滤条件的操作
            -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--
      FileAppender：日志文件输出
        <prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。

    RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：
        <rollingPolicy>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
        <triggeringPolicy >: 告知 RollingFileAppender 合适激活滚动。
        <prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。
    -->
    <appender name="INFOFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
                滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。
             FixedWindowRollingPolicy： 根据固定窗口算法重命名文件的滚动策略。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的路径+文件名 配置日志所生成的目录以及生成文件名的规则-->
            <FileNamePattern>${log.base}/info/logbackInfo.log.%d{yyyyMMdd}.%i</FileNamePattern>
            <!--日志文件保留天数，超出数量就删除旧文件-->
            <MaxHistory>30</MaxHistory>
            <!-- 当天的日志大小 超过${log.max.size}时,压缩日志并保存 -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${log.max.size}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- encoder：对记录事件进行格式化。一是把日志信息转换成字节数组，二是把字节数组写入到输出流。-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--
                 目前PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个<pattern>节点，用来设置日志的输入格式。
                 使用“%”加“转换符”方式，如果要输出“%”，则必须用“\”对“\%”进行转义
            -->
            <!--格式化输出,%d:日期;%thread:线程名;%-5level：级别,从左显示5个字符宽度;%msg:日志消息;%n:换行符-->
            <pattern>
                [ %-5level] [%date{yyyy-MM-dd HH:mm:ss.SSS}]%logger{96} [%line][%X{logid}]
                - %msg%n
            </pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>

        <!--SizeBasedTriggeringPolicy： 查看当前活动文件的大小，如果超过指定大小会告知 日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>${log.max.size}</MaxFileSize>
        </triggeringPolicy>

        <!-- 过滤器，执行一个过滤器会有返回个枚举值，即DENY，NEUTRAL，ACCEPT其中之一。
                返回DENY，日志将立即被抛弃不再经过其他过滤器；
                返回NEUTRAL，有序列表里的下个过滤器过接着处理日志；
                返回ACCEPT，日志会被立即处理，不再经过剩余过滤器。
            LevelFilter： 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。有以下子节点：
                <level>:设置过滤级别
                <onMatch>:用于配置符合过滤条件的操作
                <onMismatch>:用于配置不符合过滤条件的操作
            -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- 还可以自定义过滤器：class写一个过滤器类-->
        <!--        <filter class="com.common.filler.LinkinFilter">-->
        <!--            <level>INFO</level>-->
        <!--            <onMatch>ACCEPT</onMatch>-->
        <!--            <onMismatch>DENY</onMismatch>-->
        <!--        </filter>-->

    </appender>

    <!-- WARN级别日志打印 -->
    <appender name="WARNFILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- encoder defaults to ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
        <encoder>
            <pattern>
                [ %-5level] [%date{yyyy-MM-dd HH:mm:ss.SSS}] %logger{96} [%line][%X{logid}]
                - %msg%n
            </pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- rollover daily 配置日志所生成的目录以及生成文件名的规则 -->
            <fileNamePattern>${log.base}/warn/logbackError.log.%d{yyyyMMdd}.%i</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 64 MB -->
                <maxFileSize>60 MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>


        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- Safely log to the same file from multiple JVMs. Degrades performance! -->
        <prudent>true</prudent>
    </appender>

    <!-- DEBUG级别日志打印 -->
    <appender name="DEBUGFILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- encoder defaults to ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
        <!--<filter class="com.ly.mp.ota.filter.LinkinFilter" /> -->
        <encoder>
            <pattern>
                [ %-5level] [%date{yyyy-MM-dd HH:mm:ss.SSS}] %logger{96} [%line][%X{logid}]
                - %msg%n
            </pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- rollover daily 配置日志所生成的目录以及生成文件名的规则 -->
            <fileNamePattern>${log.base}/debug/logbackDebug.log.%d{yyyyMMdd}.%i</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>60 MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!-- Safely log to the same file from multiple JVMs. Degrades performance! -->
        <prudent>true</prudent>
    </appender>

    <root level="INFO">
        <appender-ref ref="INFOFILE" />    <!--使用上述订阅logstash数据tcp传输 -->
        <appender-ref ref="WARNFILE" />
        <appender-ref ref="DEBUGFILE" />
        <appender-ref ref="CONSOLE" />     <!--使用springboot默认配置 调试窗口输出-->
    </root>

</configuration>